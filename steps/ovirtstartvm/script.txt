export PATH=~/ks_ovirt_py_venv/bin:$PATH

python3 <<"EOF"
import logging
import time
import sys

import ovirtsdk4 as sdk
import ovirtsdk4.types as types

logging.basicConfig(stream=sys.stdout, level=logging.INFO)
logger = logging.getLogger("Attune")

# This example will connect to the server and create a new virtual machine:

# Create the connection to the server:
connection = sdk.Connection(
    url='https://{ovirtEngineServer.fqn}/ovirt-engine/api',
    username='{ovirtEngineApiUser.user}',
    password='{ovirtEngineApiUser.password}',
    insecure=True,
    debug=True,
    log=logger,
)
logger.info("Connection Successful")

# Find the service that manages VMs:
logger.info("Getting system_service")
system_service = connection.system_service()

logger.info("Getting vms_service")
vms_service = system_service.vms_service()

logger.info("Searchig for VM 'name={kickstartedNode.fqn}'")
vm = vms_service.list(search='name={kickstartedNode.fqn}')[0]

logger.info("Getting VM Service for VM ID=%s" % vm.id)
vm_service = vms_service.vm_service(vm.id)

logger.info("Getting the disks service for the new disk")
disks_service = system_service.disks_service()

diskName='{kickstartedNode.fqn}-disk0'
search_string="name=%s" % diskName

logger.info("Getting the disk service for the new disk")
disks_service = system_service.disks_service()
disks_service_list = disks_service.list(search=search_string)

if len(disks_service_list) == 0:
    logger.info("No ISO disks found")
    exit(1)
else:
    disk = disks_service_list[0]
    logger.info("disk status = %s" % disk.status)

    logger.info("Starting to wait for disk to become online")
    while True:
        logger.info("Wait for disk to become online")
        time.sleep(5)
        
        disk_service = disks_service.disk_service(disk.id)
        disk = disk_service.get()
        if disk.status == types.DiskStatus.OK:
            break
  
logger.info("Booting VM to CDROM")
vm_service.start()

# additional documentation about attributes and types that can be changed:
# https://your.rhv.host/ovirt-engine/api/model#types/vm
# https://your.rhv.host/ovirt-engine/api/model#types/operating_system
# https://your.rhv.host/ovirt-engine/api/model#types/boot
# https://your.rhv.host/ovirt-engine/api/model#types/boot_device


# Wait till the virtual machine is up:
while True:
    time.sleep(5)
    vm = vm_service.get()
    if vm.status == types.VmStatus.UP:
        break

# Close the connection to the server:
connection.close()


EOF
