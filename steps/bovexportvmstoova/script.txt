export PATH=~/ks_ovirt_py_venv/bin:$PATH

python3 <<"EOF"

from datetime import datetime

import logging
import os
import sys

import time

import ovirtsdk4 as sdk
import ovirtsdk4.types as types

os.chdir("tmp")
cwd = os.getcwd()

vm_names_file_name = "vm_names.txt"
vm_names_file = open(vm_names_file_name, "r")

logging.basicConfig(stream=sys.stdout, level=logging.INFO)
logger = logging.getLogger("Attune")

# This example will connect to the server and transfer the ISO

# Create the connection to the server:
connection = sdk.Connection(
    url='https://{ovirtEngineServer.fqn}/ovirt-engine/api',
    username='{ovirtEngineApiUser.user}',
    password='{ovirtEngineApiUser.password}',
    insecure=True,
    debug=True,
    log=logger,
)
logger.info("Connection Successful")

logger.info("Getting system_service")
system_service = connection.system_service()

logger.info("Getting vms_service")
vms_service = system_service.vms_service()

i = 0;    
for line in vm_names_file:
    print("%s. %s" %(i, line))
    
    tokens = line.split(",")
    
    name = tokens[0].strip()
    id = tokens[1].strip()
    
    if i == 0:
        print("name = [%s], id = [%s]" % (name, id))

        logger.info("Getting VM Service for VM ID=%s" % id)
        vm_service = vms_service.vm_service(id)

        try:
          logger.info("Getting snapshots_service for VM ID=%s" % id)
          snapshots_service = vm_service.snapshots_service()

          now = datetime.now()
          dt_string = now.strftime("%Y%m%d_%H%M")

          description="Snapshotted from Attune at %s" % dt_string

          # Add the new snapshot:
          snapshots_service.add(
              types.Snapshot(
                  description=description
              ),
          )

          snapshots = snapshots_service.list()
          for snapshot in snapshots:
              if snapshot.description == description:
                  snapshot_service = snapshots_service.snapshot_service(snapshot.id)
                  while True:
                      try:
                          snap_shot = snapshot_service.get()
                      except:
                          break
                      
                      logger.info("Snapshot id=%s status=%s description=%s" % (snapshot.id, snapshot.snapshot_status, description))

                      if snap_shot.snapshot_status == types.SnapshotStatus.OK:
                          logger.info("Finished snapshotting %s" % name)
                          break

                      time.sleep(5)

        except Exception as e:
          logger.info("Can't create snapshot for VM: %s", name)
          logger.info("DEBUG: %s", e)
          exit(1)

    i += 1

# Close the connection to the server:
connection.close()

EOF