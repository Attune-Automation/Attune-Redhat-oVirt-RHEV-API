export PATH=~/ks_ovirt_py_venv/bin:$PATH

python3 <<"EOF"

from datetime import datetime

import logging
import os
import sys

import time

import ovirtsdk4 as sdk
import ovirtsdk4.types as types

# 10 minutes timeout to take a snapshot
timeout_seconds = 60*10

# Searches for the snapshot with the description and waits for it's
# status to change from locked to ok.
#
# Exits failure if it takes more than timeout_seconds.
def waitForSnapshotToFinish(snapshots_service, description, timeout_seconds):
    start = time.time()

    snapshots = snapshots_service.list()
    for snapshot in snapshots:
        if snapshot.description == description:
            snapshot_service = snapshots_service.snapshot_service(snapshot.id)
            while True:
                try:
                    snap_shot = snapshot_service.get()
                except:
                    break

                now = time.time()
                elapsed_seconds = round(now - start, 1)
                seconds_to_timeout = round(timeout_seconds - elapsed_seconds, 1)

                logger.info("Snapshot id=%s status=%s description=%s seconds_to_timeout=%s" % 
                    (snapshot.id, snapshot.snapshot_status, description, seconds_to_timeout))

                if snap_shot.snapshot_status == types.SnapshotStatus.OK:
                    logger.info("Finished snapshotting %s in %s seconds" % 
                      (name, elapsed_seconds))
                    break

                if elapsed_seconds > timeout_seconds:
                  logger.info("Snapshotting %s timed out at %s seconds" % 
                    (name, elapsed_seconds))
                  exit(1)

                time.sleep(5)

os.chdir("tmp")
cwd = os.getcwd()

vm_names_file_name = "{ovirtUniqueFileName}"
vm_names_file = open(vm_names_file_name, "r")

logging.basicConfig(stream=sys.stdout, level=logging.INFO)
logger = logging.getLogger("Attune")

# This example will connect to the server and take snapshots

# Create the connection to the server:
connection = sdk.Connection(
    url='https://{ovirtEngineServer.fqn}/ovirt-engine/api',
    username='{ovirtEngineApiUser.user}',
    password='{ovirtEngineApiUser.password}',
    insecure=True,
    debug=True,
    log=logger,
)
logger.info("Connection Successful")

logger.info("Getting system_service")
system_service = connection.system_service()

logger.info("Getting vms_service")
vms_service = system_service.vms_service()

i = 0;    
for line in vm_names_file:
    print("%s. %s" %(i, line))
    
    tokens = line.split(",")
    
    # we need strip() to remove spaces and newlines around the tokens
    name = tokens[0].strip()
    id = tokens[1].strip()
    
    print("name = [%s], id = [%s]" % (name, id))

    logger.info("Getting VM Service for VM ID=%s" % id)
    vm_service = vms_service.vm_service(id)

    try:
      logger.info("Getting snapshots_service for VM ID=%s" % id)
      snapshots_service = vm_service.snapshots_service()

      now = datetime.now()
      dt_string = now.strftime("%Y%m%d_%H%M")

      description="Snapshotted %s from Attune %s at %s" % (name, "{attuneOsBuildServer.fqn}", dt_string)

      # Add the new snapshot.
      #
      # By default:
      # 1. Persist_memorystate is true.
      # 2. All disks are snapshotted.
      snapshots_service.add(
          types.Snapshot(
              description=description
          ),
      )

      waitForSnapshotToFinish(snapshots_service, description, timeout_seconds)

      snapshots = snapshots_service.list()

    except Exception as e:
      logger.info("Can't create snapshot for VM: %s", name)
      logger.info("DEBUG: %s", e)
      exit(1)

    i += 1

# Close the connection to the server:
connection.close()

EOF