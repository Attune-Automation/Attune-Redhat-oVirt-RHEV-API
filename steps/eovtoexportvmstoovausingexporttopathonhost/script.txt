export PATH=~/ks_ovirt_py_venv/bin:$PATH

python3 <<"EOF"
import logging
import os
import time
import sys

import ovirtsdk4 as sdk
import ovirtsdk4.types as types
      
logging.basicConfig(stream=sys.stdout, level=logging.INFO)
logger = logging.getLogger("Attune")

ovirtHostServer="{oVirtHostServer.fqn}"
logger.info("ovirtHostServer=%s", ovirtHostServer)

# Create the connection to the server:
connection = sdk.Connection(
    url='https://{ovirtEngineServer.fqn}/ovirt-engine/api',
    username='{ovirtEngineApiUser.user}',
    password='{ovirtEngineApiUser.password}',
    insecure=True,
    debug=True,
    log=logger,
)
logger.info("Connection Successful")

def waitForJobsToFinish(all=False):
    jobs_service = connection.system_service().jobs_service()
    jobs = jobs_service.list()
    
    while True :
        jobs = jobs_service.list()
        for job in list(jobs):
            if ovirtHostServer.lower() not in job.description.lower():
                jobs.remove(job)
                continue
                
            jobStat = jobs_service.job_service(job.id).get()

            if jobStat.status == types.JobStatus.FAILED:
                jobs.remove(job)
                continue

            if jobStat.status == types.JobStatus.FINISHED:
                jobs.remove(job)
                continue
                
            logger.info("Waiting, %s - %s" % (jobStat.status, job.description))
        
        if all:
            if not jobs:
                break
                
        elif len(jobs) < {maxConcurrentOvaExports}:
            logger.info("Waiting for %s Jobs to complete", len(jobs))
            break
            
        time.sleep(10)
        
    logger.info("Waiting for Jobs to complete - finished")

logger.info("Getting hosts_service")
hosts_service = connection.system_service().hosts_service()

# Find the host:
host = hosts_service.list(search='name=' + ovirtHostServer)[0]
logger.info("host = %s, %s" % (host.id, host.name))

# Find the service that manages the host:
host_service = hosts_service.host_service(host.id)

# Find the service that manages VMs:
logger.info("Getting system_service")
system_service = connection.system_service()

logger.info("Getting vms_service")
vms_service = system_service.vms_service()


vm_names_file_name = "{ovirtHostServer.hostname}_{ovirtVmSearchString}_vm_list.txt"
vm_names_file_name = vm_names_file_name.replace('*', 'X').replace(',', '_').replace(' ', '')
logger.info("vm_names_file_name=[%s]" % vm_names_file_name)
vm_names_file = open(vm_names_file_name, "r")

i = 0;    
for line in vm_names_file:
    logger.info("%s. %s" %(i, line))
    
    tokens = line.split(",")
    
    # we need strip() to remove spaces and newlines around the tokens
    name = tokens[0].strip()
    id = tokens[1].strip()
    
    logger.info("name = [%s], id = [%s]" % (name, id))

    logger.info("Getting VM Service for VM ID=%s" % id)
    vm_service = vms_service.vm_service(id)
    
    # Check that there are no running jobs.
    waitForJobsToFinish()
    
    logger.info("Exporting %s to %s on host %s",
        name,
        '{ovaExportPath}',
        '{ovirtHostServer.hostname}'
    )
    
    vm_service.export_to_path_on_host(
        host=types.Host(id=host.id),
        directory='{ovaExportPath}',
        exclusive=True,
        filename=('%s.ova' % (name)),
        wait=True,
    )
    
    # Wait for the export to finish.
    waitForJobsToFinish()

waitForJobsToFinish(all=True)

EOF